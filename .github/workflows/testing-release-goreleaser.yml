name: Release-gr
run-name: "Testing release workflow with goreleaser"

env:
  APPLICATION: "erigon"
  GOLANG_BUILDER_VERSION: "1.22-bookworm"
  BUILDER_IMAGE_OLD: "goreleaser/goreleaser-cross:v1.21.9"
  BUILDER_IMAGE: "ghcr.io/goreleaser/goreleaser-cross:v1.21.13"
  TARGET_BASE_VERSION: "bullseye-20240812"
  APP_REPO: "erigontech/erigon"
  PACKAGE: "github.com/erigontech/erigon"
  DOCKERHUB_REPOSITORY_DEV: "erigontech/dev-erigon"
  DOCKERHUB_REPOSITORY_PRD: "erigontech/dev-erigon"
  GITHUB_AUTOMATION_EMAIL: "github-automation@erigon.tech"
  GITHUB_AUTOMATION_NAME: "Erigon Github Automation"
  LABEL_DESCRIPTION: "Erigon is an implementation of Ethereum (execution layer with embeddable consensus layer), on the efficiency frontier. Archive Node by default."

on:
  push:
    branches-ignore:
      - '**'
    #branches:
    #  - 'master'
    #tags:
      ## only trigger on release tags:
      #- 'v*.*.*'
      #- 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      checkout_ref:
        required: true
        type: string
        default: 'feature/issue-7893-2'
        description: 'The branch to checkout and build artifacts from. By default "main".'
      release_version:
        required: false
        type: string
        description: 'Release version number (Pattern - v#.#.# , f.e. v2.41.3 or v3.0.0 or v3.0.0-alpha1 for pre-releases)'
      perform_release:
        required: true
        type: boolean
        default: false
        description: 'perform_release: when set then all artifacts will be published and the DRAFT of the release 
          notes will be created.'

jobs:

  build-release:
    ## runs-on: ubuntu-22.04
    runs-on: ubuntu-latest-devops-large
    timeout-minutes: 60
    name: Build Release
    outputs:
      my_git_ref_id: ${{ steps.getCommitId.outputs.id }}
      my_short_commit_id: ${{ steps.getCommitId.outputs.short_commit_id }}

    steps:
      - name: Fast checkout git repository in order to get commit id for further checkouts by this workflow
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 ## 4.1.7 release
        with:
          repository: ${{ env.APP_REPO }}
          fetch-depth: 0
          ref: ${{ inputs.checkout_ref }}

      - name: Check if tag ${{ inputs.release_version }} already exists. Exit workflow if tag already exist.
        if: ${{ inputs.perform_release }}
        run: |
          if git ls-remote --exit-code --quiet --tags origin '${{ inputs.release_version }}'; then
            echo "ERROR: tag ${{ inputs.release_version }} exists and workflow is performing release. Exit."
            exit 1
          else
            echo "OK: tag ${{ inputs.release_version }} does not exists. Proceeding."
          fi

      - name: Get commit id
        id: getCommitId
        run: |
          echo "id=$(git log -1 --format='%H')" >> $GITHUB_OUTPUT
          echo "short_commit_id=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Cleanup disk space
        run: |
          echo "DEBUG: disk free before cleanup:"
          df -h
          sudo rm -drf /usr/share/dotnet /usr/local/lib/android /usr/local/share/powershell /usr/share/swift
          docker images
          docker rmi $(docker image ls --filter=reference='node:1*' -q) || true
          echo "DEBUG: disk free after cleanup:"
          df -h

      - name: Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567  ## v3.3.0
        with:
          username: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf ## v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db ## v3.6.1

      - name: Build binaries with goreleaser
        env:
          BUILD_VERSION: ${{ inputs.release_version }}
          DOCKER_URL: ${{ env.DOCKERHUB_REPOSITORY_DEV }}
          LABEL_DESCRIPTION: ${{ env.LABEL_DESCRIPTION }}
        run: |
          docker run --rm \
            -w /${{ env.APPLICATION }}/ \
            -e BUILD_VERSION=${{ env.BUILD_VERSION }} \
            -e GIT_COMMIT=${{ github.sha }} \
            -e GIT_BRANCH=${{ github.ref_name }} \
            -e GIT_TAG="notdefined-tag" \
            -e PACKAGE=${{ env.PACKAGE }} \
            -e APPLICATION=${{ env.APPLICATION }} \
            -e DOCKER_URL=${{ env.DOCKER_URL }} \
            -e TARGET_BASE_VERSION=${{ env.TARGET_BASE_VERSION }} \
            -v $(pwd):/${{ env.APPLICATION}} \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.BUILDER_IMAGE }} release --debug --clean --skip=validate,announce,publish
          echo "DEBUG ls -lao"
          ls -lao
          echo "DEBUG ls -lao dist/"
          find dist/ -ls
          docker images

      - name: Build docker images and
        env:
          BUILD_VERSION: ${{ inputs.release_version }}
          DOCKER_URL: ${{ env.DOCKERHUB_REPOSITORY_DEV }}
          DOCKERFILE_PATH: ./Dockerfile.NEW-gr2
        run: |
          docker buildx build \
          --file ${{ env.DOCKERFILE_PATH }} \
          --build-arg TARGET_BASE_VERSION=${{ env.TARGET_BASE_VERSION }} \
          --build-arg VERSION=${{ env.BUILD_VERSION }} \
          --build-arg APPLICATION=${{ env.APPLICATION }} \
          --tag ${{ env.DOCKER_URL }}:${{ env.BUILD_VERSION }} \
          --push \
          --platform linux/amd64,linux/arm64 .

      - name: Upload Artifacts
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a  ## v4.3.6
        with:
          path: |
            ./dist/*.tar.gz
            ./dist/*.zip
          retention-days: 4
          compression-level: 0
          if-no-files-found: error

      - name: Publish draft of the Release notes with assets
        if: ${{ inputs.perform_release }}
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
          DOCKER_META_TAGS: ${{ env.DOCKERHUB_REPOSITORY_DEV }}:${{ inputs.release_version }}
          GITHUB_RELEASE_TARGET: main
          LOCAL_VERSION: ${{ inputs.release_version && inputs.release_version || format('SNAPSHOT-{0}',env.my_short_commit_id) }}
        run: |
          cd dist
          gh release create ${LOCAL_VERSION} *.tar.gz *.zip *_checksums.txt \
            --generate-notes \
            --target ${GITHUB_RELEASE_TARGET} \
            --draft=true \
            --title "${{ inputs.release_version }}" \
            --notes "**Improvements:**<br>- ...coming soon <br><br>**Bugfixes:**<br><br>- ...coming soon<br><br>**Docker images:**<br><br>Docker image released:<br> ${{ env.DOCKER_META_TAGS }}<br><br>... coming soon<br>"

